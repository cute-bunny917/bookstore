# Local development docker-compose file
# docker-compose up -d --build

# docker-compose version
version: '3.8'

services:
  web:
    build: .
    # command: python /code/manage.py runserver 0.0.0.0:8000
    # Gunicorn : Python Web Server Gateway Interface HTTP server.
    command: gunicorn config.wsgi -b 0.0.0.0:8000 # new
    # Docker volumes allow you to persist data from containers and easily share the data between multiple containers.
    volumes:
      - .:/code
    ports:
      - 8000:8000
    # Express dependency between services
    depends_on:
      - db
    environment:
      - "DJANGO_SECRET_KEY=)*_s#exg*#w+#-xt=vu8b010%%a&p@4edwyj0=(nqq90b9a8*n"
      - "DJANGO_DEBUG=True"
      - "DJANGO_SECURE_SSL_REDIRECT=False"
      - "DJANGO_SECURE_HSTS_SECONDS=0"
      - "DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS=False"
      - "DJANGO_SECURE_HSTS_PRELOAD=False"
      - "DJANGO_SESSION_COOKIE_SECURE=False"
      - "DJANGO_CSRF_COOKIE_SECURE=False"
  db:
    image: postgres:11
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    # For simplicity, we use POSTGRES_HOST_AUTH_METHOD=trust to allow passwordless access from our local host machine.
    environment:
      - "POSTGRES_HOST_AUTH_METHOD=trust"
# The Postgres official image, however, comes with a VOLUME predefined in its image description.
# This means that when you run a PostgreSQL image as a container, it creates a volume for itself and stores data in there.
volumes:
  postgres_data:
